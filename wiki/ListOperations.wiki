#summary List operations.

= List Operations =

There are three operators which take sequences and expressions as arguments, and return a new value. 

The `mapeach` operator returns a new sequence by applying a transform function to each item in a sequence. In some languages this is known as a map operation.

  {{{
  var sqrs : Seq = 
    mapeach (x in xs) 
      x * x;   
  }}}

The `select` operator creates a sequence by selecting only items in another sequence that satisfy a criteria defined by an expression. In some languages this is known as a filter.

  {{{
  var evens : Seq = 
    select (x from xs) 
      x % 2 == 0;
  }}}

The `accumulate` operator combines items in a list using a binary function with an accumulator value. In some languages this is known as a fold or reduce operation.

  {{{
  var sum =
    accumulate (acc = 0 forall x in xs) 
      acc += x;
  }}}

Sequence operators can be optimized by a compiler, and are not guaranteed to execute if the resulting value is never needed. Code should not rely on side effects generated by the expression arguments.   