#summary The collection types in Heron
#labels Phase-Design

= Collection Types =

== Sequence ==

The fundamental collection data type of Heron is the sequence (`Seq`). All other collections derive from it. It supports two operations, `ToList() : List` and `GetIterator() : Iterator`. You cannot instantiate a `Seq` type directly. It is commonly used to pass it an a argument, or return it from a function, that can operate on both iterators and lists. A sequence is similar to the `IEnumerable` interface in C#.

== List == 

The list (`List`) derives from `Seq`. This is the type that a Heron programmer will most commonly declare. A list supports adding (`Add()`) and removing (`Remove()`) items from the end (like a stack) and indexing (like an array).

Lists can be defined as literals using square brackets, or can be built iteratively using the `Add()` method.

An example of a list literal is:

{{{
  var myList : List = ['a', 42, "Hello"];
  myList.Remove();
  myList.Add("Goodbye");
}}}

== Iterator === 

An iterator, also known as an enumerator in some languages, derives from `Seq` and is used to iterate over a sequence of items. Every sequence provides access to an iterator. An iterator supports `MoveNext() : Boolean` and `GetValue() : Any` methods. 

== Range == 

A range is a  iterator over a contiguous sequence of integers and is created by using the range operator (`..`).

{{{
  var oneToTen : Seq = 
     1..10;
}}}  

== Sequence Operators ==

There are three operators which take sequences and expressions as arguments, and return a new value. 

The `mapeach` operator returns a new sequence by applying a transform function to each item in a sequence. In some languages this is known as a map operation.

  {{{
  var sqrs : Seq = 
    mapeach (x in xs) 
      x * x;   
  }}}

The `select` operator creates a sequence by selecting only items in another sequence that satisfy a criteria defined by an expression. In some languages this is known as a filter.

  {{{
  var evens : Seq = 
    select (x from xs) 
      x % 2 == 0;
  }}}

The `accumulate` operator combines items in a list using a binary function with an accumulator value. In some languages this is known as a fold or reduce operation.

  {{{
  var sum =
    accumulate (acc = 0 forall x in xs) 
      acc += x;
  }}}

Sequence operators can be optimized by a compiler, and are not guaranteed to execute if the resulting value is never needed. Code should not rely on side effects generated by the expression arguments.   

== Sequence Statements ==

The `foreach` statement executes a statement for each item in a list consecutively.  

  {{{
  foreach (x in 0..99)
    Console.WriteLine(x + " bottles of beer on the wall");
  }}}

Unlike the sequence operators like `mapeach`, it is guaranteed to execute the statement for every item in the sequence.

= Implementation Details =

The implementation of collections can be found in the file [http://code.google.com/p/heron-language/source/browse/trunk/HeronEngine/HeronCollection.cs HeronCollection.cs].

Currently the `Seq` type supports comparison, but this is not clear whether or not it should stay.

 